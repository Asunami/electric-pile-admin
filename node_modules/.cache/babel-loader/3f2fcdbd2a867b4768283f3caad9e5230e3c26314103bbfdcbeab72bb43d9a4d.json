{"ast":null,"code":"import { deleteBatch, deleteById, getAllManager, getAllRole, getManagerRole, getManagerRoleIds, addManager } from \"@/api/manager.js\";\nexport default {\n  name: 'ElectricPileAdminManager',\n  data() {\n    return {\n      tableData: [],\n      total: 0,\n      pageNum: 1,\n      pageSize: 10,\n      managerListQuery: {\n        pageNum: '1',\n        pageSize: '10',\n        name: ''\n      },\n      dialogFormVisible: false,\n      dialogRole: false,\n      form: {},\n      multipleSelection: [],\n      roleData: [],\n      props: {\n        label: 'name'\n      },\n      managerId: 0,\n      expands: [],\n      checks: []\n    };\n  },\n  mounted() {},\n  created() {\n    this.load();\n  },\n  methods: {\n    //搜索重置\n    reset() {\n      this.name = '';\n      this.load();\n    },\n    //打开新增管理员对话框，同时获取图标数据\n    handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {}; //如果之前有填过值，可以置空 \n    },\n\n    //实现新增管理员\n    save() {\n      addManager(this.form).then(res => {\n        if (res.data.code == '200') {\n          this.$message.success(\"保存成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"保存失败\");\n        }\n      });\n    },\n    //编辑管理员\n    handleEdit(row) {\n      //编辑\n      this.form = row; //把当前行的数据赋值给form\n      this.dialogFormVisible = true;\n    },\n    //多行选择\n    handleSelectionChange(val) {\n      console.log(val);\n      this.multipleSelection = val;\n    },\n    handleSizeChange(val) {\n      /*传递过来当前是第几页*/\n      console.log(`每页 ${val} 条`);\n      this.pageSize = val; //获取当前每页显示条数\n      this.load();\n    },\n    handleCurrentChange(val) {\n      /*传递过来当前是第几页*/\n      console.log(`当前页: ${val}`);\n      this.pageNum = val; //获取当前第几页\n      this.load();\n    },\n    //批量删除\n    delBatch() {\n      let ids = this.multipleSelection.map(v => v.id); //map这个方法可以实现将multipleSelection中的对象扁平化处理。\n      deleteBatch(ids).then(res => {\n        if (res.data.code == '200') {\n          this.$message.success(\"批量删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"批量删除失败\");\n        }\n      });\n    },\n    //根据选择行的id删除\n    handleDelete(id) {\n      deleteById(id).then(res => {\n        if (res.data.code == '200') {\n          this.$message.success(\"删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"删除失败\");\n        }\n      });\n    },\n    //将请求数据封装为一个方法\n    load() {\n      //使用axios封装的request，获取所有菜单数据        \n      getAllManager(this.managerListQuery).then(res => {\n        console.log(res);\n        this.tableData = res.data.data.records;\n      });\n    },\n    //分配角色按钮事件 \n    selectRole(manager) {\n      this.dialogRole = true;\n      this.managerId = manager.id;\n      //添加权限（树形结构）\n      //拿到角色列表\n      getAllRole().then(res => {\n        this.roleData = res.data.data;\n        console.log(\"所有角色数据\", this.roleData);\n        this.expands = this.roleData.map(v => v.id);\n        console.log(\"expands\", this.expands);\n      });\n      getManagerRole(this.managerId).then(res => {\n        //当前管理员的角色\n        console.log(\"当前管理员角色\", res.data.data);\n        this.checks = res.data.data;\n        getManagerRoleIds().then(r => {\n          //取出所有的菜单id\n          const ids = r.data.data;\n          console.log(\"所有角色id\", ids);\n          ids.forEach(id => {\n            if (!this.checks.includes(id)) {\n              //和当前的角色菜单进行比较,没有就不显示\n              //使用setChecked方法需要设置  node-key=\"id\"  设置为false即为不渲染\n              this.$refs.tree.setChecked(id, false);\n            }\n          });\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["deleteBatch","deleteById","getAllManager","getAllRole","getManagerRole","getManagerRoleIds","addManager","name","data","tableData","total","pageNum","pageSize","managerListQuery","dialogFormVisible","dialogRole","form","multipleSelection","roleData","props","label","managerId","expands","checks","mounted","created","load","methods","reset","handleAdd","save","then","res","code","$message","success","error","handleEdit","row","handleSelectionChange","val","console","log","handleSizeChange","handleCurrentChange","delBatch","ids","map","v","id","handleDelete","records","selectRole","manager","r","forEach","includes","$refs","tree","setChecked"],"sources":["src/views/system/manager.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div style=\"padding:10px\">\r\n            <el-button style=\"margin-left:5px\" type=\"primary\" @click=\"handleAdd\">新增<i\r\n                    class=\"el-icon-circle-plus\"></i></el-button>\r\n            <el-button style=\"margin-left:5px\" type=\"danger\" @click=\"delBatch\">批量删除<i\r\n                    class=\"el-icon-remove\"></i></el-button>\r\n            <el-input style=\"width:250px; margin-left: 500px;\" suffix-icon=\"el-icon-search\" placeholder=\"请输入名称搜索\"\r\n                v-model=\"managerListQuery.name\"></el-input>\r\n            <el-button style=\"margin-left:5px\" type=\"primary\" @click=\"load()\">搜索</el-button>\r\n            <el-button style=\"margin-left:5px\" type=\"warning\" @click=\"reset()\">重置</el-button>\r\n        </div>\r\n        <el-table :data=\"tableData\" row-key=\"id\" border @selection-change=\"handleSelectionChange\">\r\n            <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n            <el-table-column prop=\"id\" label=\"ID\" width=\"60\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"username\" label=\"用户名\" width=\"80\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"realname\" label=\"真实姓名\" width=\"100\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"phone\" label=\"电话\" width=\"120\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"email\" label=\"邮箱\" width=\"200\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column label=\"状态\" align=\"center\" width=\"100\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-tag type=\"success\" effect=\"plain\" v-if=\"scope.row.status==0\">已启用</el-tag>\r\n                    <el-tag type=\"danger\" effect=\"plain\" v-if=\"scope.row.status==1\">已停用</el-tag>\r\n                </template>\r\n            </el-table-column>\r\n            <el-table-column prop=\"creatTime\" label=\"创建时间\" width=\"200\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column fixed=\"right\" label=\"操作\" width=\"380\" align=\"center\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-button type=\"info\" slot=\"reference\" size=\"small\" icon=\"el-icon-menu\"\r\n                        @click=\"selectRole(scope.row)\">分配角色</el-button>\r\n                    <el-button type=\"success\" size=\"small\" icon=\"el-icon-edit\"\r\n                        @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n                    <el-popconfirm style=\"margin-left:5px\" confirm-button-text='确定' cancel-button-text='再想想'\r\n                        icon=\"el-icon-info\" icon-color=\"red\" title=\"您确定删除吗？\" @confirm=\"handleDelete(scope.row.id)\">\r\n                        <el-button type=\"danger\" size=\"small\" slot=\"reference\" icon=\"el-icon-delete\">删除</el-button>\r\n                    </el-popconfirm>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        <div style=\"padding:10px\">\r\n            <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"pageNum\"\r\n                :page-sizes=\"[2, 5, 10, 20]\" :page-size=\"pageSize\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n                :total=\"total\">\r\n            </el-pagination>\r\n        </div>\r\n\r\n        <el-dialog title=\"管理员信息\" :visible.sync=\"dialogFormVisible\" width=\"30%\">\r\n            <el-form label-width=\"80px\" size=\"small\">\r\n                <el-form-item label=\"用户名\">\r\n                    <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"密码\">\r\n                    <el-input v-model=\"form.password\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"真实姓名\">\r\n                    <el-input v-model=\"form.realname\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"电话\">\r\n                    <el-input v-model=\"form.phone\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"邮箱\">\r\n                    <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"是否启用\">\r\n                    <el-radio-group v-model=\"form.status\">\r\n                        <el-radio label=\"0\">启用</el-radio>\r\n                        <el-radio label=\"1\">禁用</el-radio>\r\n                    </el-radio-group>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n                <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n\r\n        <el-dialog title=\"角色分配\" :visible.sync=\"dialogRole\" width=\"40%\">\r\n            <el-tree :props=\"props\" :data=\"roleData\" node-key=\"id\" ref=\"tree\" :default-expanded-keys=\"expands\"\r\n                :default-checked-keys=\"checks\" show-checkbox>\r\n                <span class=\"custom-tree-node\" slot-scope=\"{data}\">\r\n                    <span><i :class=\"data.icon\"></i>{{data.name}}</span>\r\n                </span>\r\n            </el-tree>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"dialogRole = false\">取 消</el-button>\r\n                <el-button type=\"primary\" @click=\"saveManagerRole\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { deleteBatch, deleteById, getAllManager, getAllRole, getManagerRole, getManagerRoleIds, addManager } from \"@/api/manager.js\"\r\n    export default {\r\n        name: 'ElectricPileAdminManager',\r\n\r\n        data() {\r\n            return {\r\n                tableData: [],\r\n                total: 0,\r\n                pageNum: 1,\r\n                pageSize: 10,\r\n                managerListQuery: {\r\n                    pageNum: '1',\r\n                    pageSize: '10',\r\n                    name: '',\r\n                },\r\n                dialogFormVisible: false,\r\n                dialogRole: false,\r\n                form: {},\r\n                multipleSelection: [],\r\n                roleData: [],\r\n                props: {\r\n                    label: 'name'\r\n                },\r\n                managerId: 0,\r\n                expands: [],\r\n                checks: []\r\n            };\r\n        },\r\n\r\n        mounted() {\r\n\r\n        },\r\n        created() {\r\n            this.load();\r\n        },\r\n\r\n        methods: {\r\n            //搜索重置\r\n            reset() {\r\n                this.name = '';\r\n                this.load();\r\n            },\r\n            //打开新增管理员对话框，同时获取图标数据\r\n            handleAdd() {\r\n                this.dialogFormVisible = true;\r\n                this.form = {};//如果之前有填过值，可以置空 \r\n            },\r\n            //实现新增管理员\r\n            save() {\r\n                addManager(this.form).then(res => {\r\n                    if (res.data.code == '200') {\r\n                        this.$message.success(\"保存成功\");\r\n                        this.dialogFormVisible = false;\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"保存失败\");\r\n                    }\r\n                })\r\n            },\r\n            //编辑管理员\r\n            handleEdit(row) {  //编辑\r\n                this.form = row;//把当前行的数据赋值给form\r\n                this.dialogFormVisible = true;\r\n            },\r\n            //多行选择\r\n            handleSelectionChange(val) {\r\n                console.log(val);\r\n                this.multipleSelection = val;\r\n            },\r\n            handleSizeChange(val) {/*传递过来当前是第几页*/\r\n                console.log(`每页 ${val} 条`);\r\n                this.pageSize = val;  //获取当前每页显示条数\r\n                this.load();\r\n            },\r\n            handleCurrentChange(val) {/*传递过来当前是第几页*/\r\n                console.log(`当前页: ${val}`);\r\n                this.pageNum = val;   //获取当前第几页\r\n                this.load();\r\n            },\r\n            //批量删除\r\n            delBatch() {\r\n                let ids = this.multipleSelection.map(v => v.id);//map这个方法可以实现将multipleSelection中的对象扁平化处理。\r\n                deleteBatch(ids).then(res => {\r\n                    if (res.data.code == '200') {\r\n                        this.$message.success(\"批量删除成功\");\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"批量删除失败\");\r\n                    }\r\n                })\r\n            },\r\n            //根据选择行的id删除\r\n            handleDelete(id) {\r\n                deleteById(id).then(res => {\r\n                    if (res.data.code == '200') {\r\n                        this.$message.success(\"删除成功\");\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"删除失败\");\r\n                    }\r\n                })\r\n            },\r\n            //将请求数据封装为一个方法\r\n            load() {\r\n                //使用axios封装的request，获取所有菜单数据        \r\n                getAllManager(this.managerListQuery).then(res => {\r\n                    console.log(res);\r\n                    this.tableData = res.data.data.records;\r\n                })\r\n            },\r\n            //分配角色按钮事件 \r\n            selectRole(manager) {\r\n                this.dialogRole = true;\r\n                this.managerId = manager.id;\r\n                //添加权限（树形结构）\r\n                //拿到角色列表\r\n                getAllRole().then(res => {\r\n                    this.roleData = res.data.data\r\n                    console.log(\"所有角色数据\", this.roleData)\r\n                    this.expands = this.roleData.map(v => v.id)\r\n                    console.log(\"expands\", this.expands)\r\n                })\r\n\r\n                getManagerRole(this.managerId).then(res => {//当前管理员的角色\r\n                    console.log(\"当前管理员角色\", res.data.data);\r\n                    this.checks = res.data.data;\r\n                    getManagerRoleIds().then(r => {//取出所有的菜单id\r\n                        const ids = r.data.data\r\n                        console.log(\"所有角色id\", ids)\r\n                        ids.forEach(id => {\r\n                            if (!this.checks.includes(id)) { //和当前的角色菜单进行比较,没有就不显示\r\n                                //使用setChecked方法需要设置  node-key=\"id\"  设置为false即为不渲染\r\n                                this.$refs.tree.setChecked(id, false)\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n\r\n            },\r\n\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
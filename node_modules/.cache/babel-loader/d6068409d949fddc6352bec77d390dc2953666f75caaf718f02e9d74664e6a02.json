{"ast":null,"code":"import { deleteBatch, getAllUser, deleteById, addUser } from '@/api/user.js';\nconst defaultUserListQuery = {\n  username: null,\n  nickname: null,\n  phone: null,\n  pageNum: 1,\n  pageSize: 10\n};\nexport default {\n  name: 'ElectricPileAdminList',\n  data() {\n    return {\n      form: {},\n      tableData: [],\n      UserListQuery: Object.assign({}, defaultUserListQuery),\n      listLoading: true,\n      dialogFormVisible: false,\n      dialogOrderVisible: false,\n      dialogRechargeVisible: false,\n      dialogConsumptionVisible: false,\n      total: ''\n    };\n  },\n  mounted() {},\n  methods: {\n    //搜索重置\n    resetListForm(UserListQuery) {\n      this.UserListQuery = Object.assign({}, defaultUserListQuery);\n      this.load();\n    },\n    //打开新增用户对话框\n    handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {}; //如果之前有填过值，可以置空 \n    },\n\n    //实现新增用户\n    save() {\n      addUser(this.form).then(res => {\n        if (res.data.code == '200') {\n          this.$message.success(\"保存成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"保存失败\");\n        }\n      });\n    },\n    //编辑用户\n    handleUpdate(row) {\n      //编辑\n      this.form = row; //把当前行的数据赋值给form\n      this.dialogFormVisible = true;\n    },\n    //多行选择\n    handleSelectionChange(val) {\n      console.log(val);\n      this.multipleSelection = val;\n    },\n    handleSizeChange(val) {\n      /*传递过来当前是第几页*/\n      console.log(`每页 ${val} 条`);\n      this.UserListQuery.pageSize = val; //获取当前每页显示条数\n      this.load();\n    },\n    handleCurrentChange(val) {\n      /*传递过来当前是第几页*/\n      console.log(`当前页: ${val}`);\n      this.UserListQuery.pageNum = val; //获取当前第几页\n      this.load();\n    },\n    //批量删除\n    delBatch() {\n      let ids = this.multipleSelection.map(v => v.id); //map这个方法可以实现将multipleSelection中的对象扁平化处理。\n      deleteBatch(ids).then(res => {\n        if (res.data.code == '200') {\n          this.$message.success(\"批量删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"批量删除失败\");\n        }\n      });\n    },\n    //根据选择行的id删除\n    handleDelete(id) {\n      deleteById(id).then(res => {\n        if (res.data.code == '200') {\n          this.$message.success(\"删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"删除失败\");\n        }\n      });\n    },\n    //将请求数据封装为一个方法\n    load() {\n      //使用axios封装的request，获取所有菜单数据        \n      getAllUser(this.UserListQuery).then(res => {\n        console.log(res);\n        this.tableData = res.data.data.records;\n        this.total = res.data.data.total;\n      });\n    }\n  }\n};","map":{"version":3,"names":["deleteBatch","getAllUser","deleteById","addUser","defaultUserListQuery","username","nickname","phone","pageNum","pageSize","name","data","form","tableData","UserListQuery","Object","assign","listLoading","dialogFormVisible","dialogOrderVisible","dialogRechargeVisible","dialogConsumptionVisible","total","mounted","methods","resetListForm","load","handleAdd","save","then","res","code","$message","success","error","handleUpdate","row","handleSelectionChange","val","console","log","multipleSelection","handleSizeChange","handleCurrentChange","delBatch","ids","map","v","id","handleDelete","records"],"sources":["src/views/user/list.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-container>\r\n            <el-header>\r\n                <div class=\"text-item\">\r\n                    <el-form :inline=\"true\" :model=\"UserListQuery\">\r\n                        <el-form-item label=\"用户名\">\r\n                            <el-input v-model=\"UserListQuery.name\" placeholder=\"输入用户名\"></el-input>\r\n                        </el-form-item>\r\n                        <el-form-item label=\"昵称\">\r\n                            <el-input v-model=\"UserListQuery.nickname\" placeholder=\"输入昵称\"></el-input>\r\n                        </el-form-item>\r\n                        <el-form-item label=\"电话\">\r\n                            <el-input v-model=\"UserListQuery.phone\" placeholder=\"输入电话\"></el-input>\r\n                        </el-form-item>\r\n                        <el-form-item>\r\n                            <el-button type=\"primary\" @click=\"handleSearchList()\">查询</el-button>\r\n                            <el-button type=\"primary\" @click=\"resetListForm()\">重置</el-button>\r\n                        </el-form-item>\r\n                    </el-form>\r\n                </div>\r\n                <div style=\"padding:10px\">\r\n                    <el-button style=\"margin-left:5px\" type=\"primary\" @click=\"handleAdd\">新增<i\r\n                            class=\"el-icon-circle-plus\"></i></el-button>\r\n                    <el-button style=\"margin-left:5px\" type=\"danger\" @click=\"delBatch\">批量删除<i\r\n                            class=\"el-icon-remove\"></i></el-button>\r\n                </div>\r\n            </el-header>\r\n            <el-main>\r\n                <div>\r\n                    <el-table :data=\"tableData\" v-loading=\"listLoading\" border style=\"width: 100%\"\r\n                        :row-style=\"{height:'40px'}\" :cell-style=\"{padding:'0px'}\">\r\n                        <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n                        <el-table-column label=\"编号\" width=\"60\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.id}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"姓名\" width=\"100\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.name}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"职称\" width=\"120\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.nickname}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"电话\" width=\"160\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.phone}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"邮箱\" width=\"200\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.avator}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"性别\" width=\"60\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.balance}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"年龄\" width=\"60\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.battery}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"相关记录\" width=\"100\" align=\"center\">\r\n                            <template slot-scope=\"scope\">\r\n                                <p>\r\n                                    <el-button plain type=\"info\" size=\"small\"\r\n                                        @click=\"getSupportList(scope.$index,scope.row),dialogVisible = true\">查询</el-button>\r\n                                </p>\r\n                            </template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"状态\" width=\"80\" align=\"center\">\r\n                            <template slot-scope=\"scope\">\r\n                                <el-tag type=\"success\" effect=\"plain\" v-if=\"scope.row.status==0\">在线</el-tag>\r\n                                <el-tag type=\"danger\" effect=\"plain\" v-if=\"scope.row.status==1\">离线</el-tag>\r\n                            </template>\r\n                        </el-table-column>\r\n                        <el-table-column label=\"加入时间\" width=\"100\" align=\"center\">\r\n                            <template slot-scope=\"scope\">{{scope.row.creatTime | dateFormat}}</template>\r\n                        </el-table-column>\r\n                        <el-table-column fixed=\"right\" label=\"操作\" width=\"180\" align=\"center\">\r\n                            <template slot-scope=\"scope\">\r\n                                <p>\r\n                                    <el-button type=\"primary\" size=\"small\"\r\n                                        @click=\"handleUpdate(scope.$index, scope.row)\">编辑</el-button>\r\n                                    <el-button type=\"danger\" size=\"small\"\r\n                                        @click=\"handleDelete(scope.$index, scope.row)\">删除</el-button>\r\n                                </p>\r\n                            </template>\r\n                        </el-table-column>\r\n                    </el-table>\r\n                </div>\r\n            </el-main>\r\n            <el-footer>\r\n                <div class=\"pagination-container\">\r\n                    <el-pagination background @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\"\r\n                        layout=\"total, sizes, prev, pager, next, jumper\" :page-size=\"UserListQuery.pageSize\"\r\n                        :page-sizes=\"[5,10,15]\" :current-page.sync=\"UserListQuery.pageNum\" :total=\"total\">\r\n                    </el-pagination>\r\n                </div>\r\n            </el-footer>\r\n        </el-container>\r\n\r\n        <el-dialog title=\"用户信息\" :visible.sync=\"dialogFormVisible\" width=\"30%\">\r\n            <el-form label-width=\"80px\" size=\"small\">\r\n                <el-form-item label=\"用户名\">\r\n                    <el-input v-model=\"form.username\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"密码\">\r\n                    <el-input v-model=\"form.password\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"昵称\">\r\n                    <el-input v-model=\"form.nickname\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"电话\">\r\n                    <el-input v-model=\"form.phone\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"余额\">\r\n                    <el-input v-model=\"form.balance\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"头像\">\r\n                    <i class=\"el-icon-user\"></i>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n                <el-button type=\"primary\" @click=\"save()\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {deleteBatch,getAllUser,deleteById,addUser} from '@/api/user.js'\r\n    const defaultUserListQuery = {\r\n        username: null,\r\n        nickname: null,\r\n        phone: null,\r\n        pageNum: 1,\r\n        pageSize: 10\r\n    };\r\n    export default {\r\n        name: 'ElectricPileAdminList',\r\n\r\n        data() {\r\n            return {\r\n                form:{},\r\n                tableData: [],\r\n                UserListQuery: Object.assign({}, defaultUserListQuery),\r\n                listLoading: true,\r\n                dialogFormVisible:false,\r\n                dialogOrderVisible: false,\r\n                dialogRechargeVisible: false,\r\n                dialogConsumptionVisible: false,\r\n                total: '',\r\n            };\r\n        },\r\n\r\n        mounted() {\r\n\r\n        },\r\n\r\n        methods: {\r\n            //搜索重置\r\n            resetListForm(UserListQuery) {\r\n                this.UserListQuery = Object.assign({}, defaultUserListQuery);\r\n                this.load();\r\n            },\r\n            //打开新增用户对话框\r\n            handleAdd() {\r\n                this.dialogFormVisible = true;\r\n                this.form = {};//如果之前有填过值，可以置空 \r\n            },\r\n            //实现新增用户\r\n            save() {\r\n                addUser(this.form).then(res => {\r\n                    if (res.data.code == '200') {\r\n                        this.$message.success(\"保存成功\");\r\n                        this.dialogFormVisible = false;\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"保存失败\");\r\n                    }\r\n                })\r\n            },\r\n            //编辑用户\r\n            handleUpdate(row) {  //编辑\r\n                this.form = row;//把当前行的数据赋值给form\r\n                this.dialogFormVisible = true;\r\n            },\r\n            //多行选择\r\n            handleSelectionChange(val) {\r\n                console.log(val);\r\n                this.multipleSelection = val;\r\n            },\r\n            handleSizeChange(val) {/*传递过来当前是第几页*/\r\n                console.log(`每页 ${val} 条`);\r\n                this.UserListQuery.pageSize = val;  //获取当前每页显示条数\r\n                this.load();\r\n            },\r\n            handleCurrentChange(val) {/*传递过来当前是第几页*/\r\n                console.log(`当前页: ${val}`);\r\n                this.UserListQuery.pageNum = val;   //获取当前第几页\r\n                this.load();\r\n            },\r\n            //批量删除\r\n            delBatch() {\r\n                let ids = this.multipleSelection.map(v => v.id);//map这个方法可以实现将multipleSelection中的对象扁平化处理。\r\n                deleteBatch(ids).then(res => {\r\n                    if (res.data.code == '200') {\r\n                        this.$message.success(\"批量删除成功\");\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"批量删除失败\");\r\n                    }\r\n                })\r\n            },\r\n            //根据选择行的id删除\r\n            handleDelete(id) {\r\n                deleteById(id).then(res => {\r\n                    if (res.data.code == '200') {\r\n                        this.$message.success(\"删除成功\");\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"删除失败\");\r\n                    }\r\n                })\r\n            },\r\n            //将请求数据封装为一个方法\r\n            load() {\r\n                //使用axios封装的request，获取所有菜单数据        \r\n                getAllUser(this.UserListQuery).then(res => {\r\n                    console.log(res);\r\n                    this.tableData = res.data.data.records;\r\n                    this.total = res.data.data.total;\r\n                })\r\n            },\r\n\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AA4HA,SAAAA,WAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,OAAA;AACA,MAAAC,oBAAA;EACAC,QAAA;EACAC,QAAA;EACAC,KAAA;EACAC,OAAA;EACAC,QAAA;AACA;AACA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,IAAA;MACAC,SAAA;MACAC,aAAA,EAAAC,MAAA,CAAAC,MAAA,KAAAZ,oBAAA;MACAa,WAAA;MACAC,iBAAA;MACAC,kBAAA;MACAC,qBAAA;MACAC,wBAAA;MACAC,KAAA;IACA;EACA;EAEAC,QAAA,GAEA;EAEAC,OAAA;IACA;IACAC,cAAAX,aAAA;MACA,KAAAA,aAAA,GAAAC,MAAA,CAAAC,MAAA,KAAAZ,oBAAA;MACA,KAAAsB,IAAA;IACA;IACA;IACAC,UAAA;MACA,KAAAT,iBAAA;MACA,KAAAN,IAAA;IACA;;IACA;IACAgB,KAAA;MACAzB,OAAA,MAAAS,IAAA,EAAAiB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAnB,IAAA,CAAAoB,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAf,iBAAA;UACA,KAAAQ,IAAA;QACA;UACA,KAAAM,QAAA,CAAAE,KAAA;QACA;MACA;IACA;IACA;IACAC,aAAAC,GAAA;MAAA;MACA,KAAAxB,IAAA,GAAAwB,GAAA;MACA,KAAAlB,iBAAA;IACA;IACA;IACAmB,sBAAAC,GAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MACA,KAAAG,iBAAA,GAAAH,GAAA;IACA;IACAI,iBAAAJ,GAAA;MAAA;MACAC,OAAA,CAAAC,GAAA,OAAAF,GAAA;MACA,KAAAxB,aAAA,CAAAL,QAAA,GAAA6B,GAAA;MACA,KAAAZ,IAAA;IACA;IACAiB,oBAAAL,GAAA;MAAA;MACAC,OAAA,CAAAC,GAAA,SAAAF,GAAA;MACA,KAAAxB,aAAA,CAAAN,OAAA,GAAA8B,GAAA;MACA,KAAAZ,IAAA;IACA;IACA;IACAkB,SAAA;MACA,IAAAC,GAAA,QAAAJ,iBAAA,CAAAK,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,EAAA;MACAhD,WAAA,CAAA6C,GAAA,EAAAhB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAnB,IAAA,CAAAoB,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAP,IAAA;QACA;UACA,KAAAM,QAAA,CAAAE,KAAA;QACA;MACA;IACA;IACA;IACAe,aAAAD,EAAA;MACA9C,UAAA,CAAA8C,EAAA,EAAAnB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAnB,IAAA,CAAAoB,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAP,IAAA;QACA;UACA,KAAAM,QAAA,CAAAE,KAAA;QACA;MACA;IACA;IACA;IACAR,KAAA;MACA;MACAzB,UAAA,MAAAa,aAAA,EAAAe,IAAA,CAAAC,GAAA;QACAS,OAAA,CAAAC,GAAA,CAAAV,GAAA;QACA,KAAAjB,SAAA,GAAAiB,GAAA,CAAAnB,IAAA,CAAAA,IAAA,CAAAuC,OAAA;QACA,KAAA5B,KAAA,GAAAQ,GAAA,CAAAnB,IAAA,CAAAA,IAAA,CAAAW,KAAA;MACA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
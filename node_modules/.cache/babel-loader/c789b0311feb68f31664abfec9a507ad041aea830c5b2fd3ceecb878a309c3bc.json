{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport layout from '@/layout/layout.vue';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/',\n  redirect: '/login'\n}, {\n  path: '/login',\n  name: 'login',\n  component: () => import('@/views/login/index.vue')\n}\n// {\n//   path: '',\n//   component: layout,\n//   children: [{\n//     path: 'home',\n//     name: 'home',\n//     component: () => import('@/views/system/menu.vue')\n//   },]\n// },\n];\n\nconst router = new VueRouter({\n  routes,\n  mode: 'history'\n});\n\n//重置路由方法\nexport const resetRouter = () => {\n  router.matcher = new VueRouter({\n    mode: 'history',\n    routes\n  });\n};\n\n//刷新页面会重置路由\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    //拼装动态路由\n    const manageRoute = {\n      path: '/pile-admin',\n      component: layout,\n      children: []\n    };\n    const menus = JSON.parse(storeMenus);\n    menus.forEach(item => {\n      if (item.path) {\n        //当且仅当path不为空的时候才去设置路由\n        let itemMenu = {\n          path: '/pile-admin' + item.path.replace(\"/\", \"\"),\n          name: item.name,\n          component: () => import('../views/' + item.pagePath + '.vue')\n        };\n        manageRoute.children.push(itemMenu);\n      } else if (item.children.length) {\n        item.children.forEach(item => {\n          if (item.path) {\n            let itemMenu = {\n              path: '/pile-admin' + item.path.replace(\"/\", \"\"),\n              name: item.name,\n              component: () => import('../views/' + item.pagePath + '.vue')\n            };\n            manageRoute.children.push(itemMenu);\n          }\n        });\n      }\n    });\n    //获取当前的路由对象名称数组\n    const currentRouteNames = router.getRoutes().map(v => v.name);\n    if (!currentRouteNames.includes('Manage')) {\n      //动态加载到想在的路由对象\n      router.addRoute(manageRoute);\n    }\n  }\n};\nsetRoutes();\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","layout","use","routes","path","redirect","name","component","router","mode","resetRouter","matcher","setRoutes","storeMenus","localStorage","getItem","manageRoute","children","menus","JSON","parse","forEach","item","itemMenu","replace","pagePath","push","length","currentRouteNames","getRoutes","map","v","includes","addRoute"],"sources":["D:/workspace/GraduationDesign/electric-pile-admin/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport layout from '@/layout/layout.vue'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/',\n    redirect: '/login'\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: () => import('@/views/login/index.vue'),\n  },\n  // {\n  //   path: '',\n  //   component: layout,\n  //   children: [{\n  //     path: 'home',\n  //     name: 'home',\n  //     component: () => import('@/views/system/menu.vue')\n  //   },]\n  // },\n]\n\nconst router = new VueRouter({\n  routes,\n  mode:'history'\n})\n\n//重置路由方法\nexport const resetRouter=()=>{\n  router.matcher=new VueRouter({\n    mode: 'history',\n    routes\n  })\n}\n\n//刷新页面会重置路由\nexport const setRoutes=()=>{\n  const storeMenus=localStorage.getItem(\"menus\");\n  if(storeMenus){\n    //拼装动态路由\n    const manageRoute={ path: '/pile-admin', component:layout, children: []}\n    const menus=JSON.parse(storeMenus)\n    menus.forEach(item=>{\n      if(item.path){//当且仅当path不为空的时候才去设置路由\n        let itemMenu={ path: '/pile-admin'+item.path.replace(\"/\",\"\"),name: item.name,component: () => import('../views/'+item.pagePath+'.vue')}\n        manageRoute.children.push(itemMenu)\n      }else if(item.children.length){\n        item.children.forEach(item=>{\n          if(item.path){\n            let itemMenu={ path: '/pile-admin'+item.path.replace(\"/\",\"\"),name: item.name,component: () => import('../views/'+item.pagePath+'.vue')}\n            manageRoute.children.push(itemMenu)\n          }\n        })\n      }\n    })  \n    //获取当前的路由对象名称数组\n    const currentRouteNames=router.getRoutes().map(v=>v.name)\n    if(!currentRouteNames.includes('Manage')){\n      //动态加载到想在的路由对象\n    router.addRoute(manageRoute)\n    }    \n  }\n}\nsetRoutes()\n\n\n\nexport default router\n"],"mappings":";AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,qBAAqB;AAExCF,GAAG,CAACG,GAAG,CAACF,SAAS,CAAC;AAElB,MAAMG,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE;AACZ,CAAC,EACD;EACED,IAAI,EAAE,QAAQ;EACdE,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CACD;;AAED,MAAMC,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BG,MAAM;EACNM,IAAI,EAAC;AACP,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,WAAW,GAACA,CAAA,KAAI;EAC3BF,MAAM,CAACG,OAAO,GAAC,IAAIX,SAAS,CAAC;IAC3BS,IAAI,EAAE,SAAS;IACfN;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,SAAS,GAACA,CAAA,KAAI;EACzB,MAAMC,UAAU,GAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC9C,IAAGF,UAAU,EAAC;IACZ;IACA,MAAMG,WAAW,GAAC;MAAEZ,IAAI,EAAE,aAAa;MAAEG,SAAS,EAACN,MAAM;MAAEgB,QAAQ,EAAE;IAAE,CAAC;IACxE,MAAMC,KAAK,GAACC,IAAI,CAACC,KAAK,CAACP,UAAU,CAAC;IAClCK,KAAK,CAACG,OAAO,CAACC,IAAI,IAAE;MAClB,IAAGA,IAAI,CAAClB,IAAI,EAAC;QAAC;QACZ,IAAImB,QAAQ,GAAC;UAAEnB,IAAI,EAAE,aAAa,GAACkB,IAAI,CAAClB,IAAI,CAACoB,OAAO,CAAC,GAAG,EAAC,EAAE,CAAC;UAAClB,IAAI,EAAEgB,IAAI,CAAChB,IAAI;UAACC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,WAAW,GAACe,IAAI,CAACG,QAAQ,GAAC,MAAM;QAAC,CAAC;QACvIT,WAAW,CAACC,QAAQ,CAACS,IAAI,CAACH,QAAQ,CAAC;MACrC,CAAC,MAAK,IAAGD,IAAI,CAACL,QAAQ,CAACU,MAAM,EAAC;QAC5BL,IAAI,CAACL,QAAQ,CAACI,OAAO,CAACC,IAAI,IAAE;UAC1B,IAAGA,IAAI,CAAClB,IAAI,EAAC;YACX,IAAImB,QAAQ,GAAC;cAAEnB,IAAI,EAAE,aAAa,GAACkB,IAAI,CAAClB,IAAI,CAACoB,OAAO,CAAC,GAAG,EAAC,EAAE,CAAC;cAAClB,IAAI,EAAEgB,IAAI,CAAChB,IAAI;cAACC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,WAAW,GAACe,IAAI,CAACG,QAAQ,GAAC,MAAM;YAAC,CAAC;YACvIT,WAAW,CAACC,QAAQ,CAACS,IAAI,CAACH,QAAQ,CAAC;UACrC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IACF;IACA,MAAMK,iBAAiB,GAACpB,MAAM,CAACqB,SAAS,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAEA,CAAC,CAACzB,IAAI,CAAC;IACzD,IAAG,CAACsB,iBAAiB,CAACI,QAAQ,CAAC,QAAQ,CAAC,EAAC;MACvC;MACFxB,MAAM,CAACyB,QAAQ,CAACjB,WAAW,CAAC;IAC5B;EACF;AACF,CAAC;AACDJ,SAAS,CAAC,CAAC;AAIX,eAAeJ,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
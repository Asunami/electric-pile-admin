{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from '@/utils/request.js';\nimport { resetRouter } from \"@/router\";\nimport { deleteBatch, deleteById, getAllMenu, getRoleMenu, getRoleMenuIds, addRole } from \"@/api/role.js\";\nconst defaultRoleListQuerry = {\n  name: null\n};\nexport default {\n  name: \"ElectricPileAdminRole\",\n  data() {\n    return {\n      tableData: [],\n      total: 0,\n      pageNum: 1,\n      pageSize: 10,\n      roleListQuerry: Object.assign({}, defaultRoleListQuerry),\n      dialogFormVisible: false,\n      dialogMenu: false,\n      form: {},\n      multipleSelection: [],\n      menuData: [],\n      props: {\n        label: 'name'\n      },\n      roleId: 0,\n      roleFlag: '',\n      expands: [],\n      checks: []\n    };\n  },\n  created() {\n    this.load();\n  },\n  methods: {\n    //编辑按钮事件\n    handleEdit(row) {\n      console.log(row);\n      this.form = row; //把当前行的数据赋值给form\n      this.dialogFormVisible = true;\n    },\n    //表格多选选中事件\n    handleSelectionChange(val) {\n      console.log(val);\n      this.multipleSelection = val;\n    },\n    //批量删除按钮事件\n    delBatch() {\n      let ids = this.multipleSelection.map(v => v.id); //map这个方法可以实现将multipleSelection中的对象扁平化处理。\n      console.log(ids);\n      deleteBatch(ids).then(res => {\n        if (res.code == '200') {\n          this.$message.success(\"批量删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"批量删除失败\");\n        }\n      });\n    },\n    //单条记录删除按钮事件\n    handleDelete(id) {\n      deleteById(id).then(res => {\n        if (res.code == '200') {\n          this.$message.success(\"删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"删除失败\");\n        }\n      });\n    },\n    handleSizeChange(val) {\n      /*传递过来当前是第几页*/\n      console.log(`每页 ${val} 条`);\n      this.pageSize = val; //获取当前每页显示条数\n      this.load();\n    },\n    handleCurrentChange(val) {\n      /*传递过来当前是第几页*/\n      console.log(`当前页: ${val}`);\n      this.pageNum = val; //获取当前第几页\n      this.load();\n    },\n    //将请求数据封装为一个方法\n    load() {\n      //请求分页查询数据\n      //使用axios封装的request        \n      this.request.get(\"http://localhost:8088/role/page\", {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          name: this.name\n        }\n      }).then(res => {\n        this.tableData = res.data.records;\n        this.total = res.data.total;\n      });\n    },\n    //新增角色按钮事件\n    handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {}; //如果之前有填过值，可以置空\n    },\n\n    //分配菜单按钮事件 \n    selectMenu(role) {\n      this.dialogMenu = true;\n      this.roleId = role.id;\n      //添加权限（树形结构）\n      //拿到菜单列表\n      getAllMenu().then(res => {\n        this.menuData = res.data.data;\n        console.log(\"所有菜单数据\", this.menuData);\n        this.expands = this.menuData.map(v => v.id);\n        console.log(\"expands\", this.expands);\n      });\n      getRoleMenu(this.roleId).then(res => {\n        //当前角色的权限菜单\n        console.log(\"当前角色的菜单\", res.data);\n        this.checks = res.data.data;\n        getRoleMenuIds().then(r => {\n          //取出所有的菜单id\n          const ids = r.data.data;\n          console.log(\"所有菜单id\", ids);\n          ids.forEach(id => {\n            if (!this.checks.includes(id)) {\n              //和当前的权限菜单进行比较,没有就不显示\n              //使用setChecked方法需要设置  node-key=\"id\"  设置为false即为不渲染\n              this.$refs.tree.setChecked(id, false);\n            }\n          });\n        });\n      });\n    },\n    //保存角色按钮事件\n    save() {\n      addRole(this.form).then(res => {\n        if (res.code == '200') {\n          this.$message.success(\"保存成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"保存失败\");\n        }\n      });\n    },\n    //分配菜单对话框中的确定按钮事件\n    saveRoleMenu() {\n      this.request.post(\"http://localhost:8088/role/roleMenu/\" + this.roleId, this.$refs.tree.getCheckedKeys().concat(this.$refs.tree.getHalfCheckedKeys())).then(res => {\n        if (res.code == '200') {\n          this.$message.success(\"绑定成功\");\n          this.dialogMenu = false;\n          //操作管理员角色权限后需要重新登录\n          if (this.roleFlag == \"ROLE_ADMIN\") {\n            //把原来的路由清除   \n            resetRouter();\n            this.$router.push(\"/login\");\n          }\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    //搜索重置按钮事件\n    reset() {\n      this.roleListQuerry.name = \"\";\n      this.load();\n    }\n  }\n};","map":{"version":3,"names":["request","resetRouter","deleteBatch","deleteById","getAllMenu","getRoleMenu","getRoleMenuIds","addRole","defaultRoleListQuerry","name","data","tableData","total","pageNum","pageSize","roleListQuerry","Object","assign","dialogFormVisible","dialogMenu","form","multipleSelection","menuData","props","label","roleId","roleFlag","expands","checks","created","load","methods","handleEdit","row","console","log","handleSelectionChange","val","delBatch","ids","map","v","id","then","res","code","$message","success","error","handleDelete","handleSizeChange","handleCurrentChange","get","params","records","handleAdd","selectMenu","role","r","forEach","includes","$refs","tree","setChecked","save","saveRoleMenu","post","getCheckedKeys","concat","getHalfCheckedKeys","$router","push","msg","reset"],"sources":["src/views/system/role.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div style=\"padding:10px\">\r\n            <el-button type=\"primary\" @click=\"handleAdd\">新增<i class=\"el-icon-circle-plus\"></i></el-button>\r\n            <el-button type=\"danger\" @click=\"delBatch\">批量删除<i class=\"el-icon-remove\"></i></el-button>\r\n            <el-input style=\"width:250px; margin-left: 500px;\" suffix-icon=\"el-icon-search\" placeholder=\"请输入名称搜索\"\r\n                v-model=\"roleListQuerry.name\"></el-input>\r\n            <el-button style=\"margin-left:5px\" type=\"primary\" @click=\"load\">搜索</el-button>\r\n            <el-button style=\"margin-left:5px\" type=\"warning\" @click=\"reset\">重置</el-button>\r\n        </div>\r\n        <el-table :data=\"tableData\" @selection-change=\"handleSelectionChange\">\r\n            <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n            <el-table-column prop=\"id\" label=\"ID \" width=\"80\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"name\" label=\"名称 \" width=\"160\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column prop=\"description\" label=\"描述\" width=\"160\" align=\"center\">\r\n            </el-table-column>\r\n            <el-table-column fixed=\"right\" label=\"操作\" width=\"280\" align=\"center\">\r\n                <template slot-scope=\"scope\">\r\n                    <el-button type=\"info\" slot=\"reference\" size=\"small\" icon=\"el-icon-menu\"\r\n                        @click=\"selectMenu(scope.row)\">分配菜单</el-button>\r\n                    <el-button type=\"success\" size=\"small\" icon=\"el-icon-edit\"\r\n                        @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n                    <el-popconfirm style=\"margin-left:5px\" confirm-button-text='确定' cancel-button-text='再想想'\r\n                        icon=\"el-icon-info\" icon-color=\"red\" title=\"您确定删除吗？\" @confirm=\"handleDelete(scope.row.id)\">\r\n                        <el-button type=\"danger\" size=\"small\" slot=\"reference\" icon=\"el-icon-delete\">删除</el-button>\r\n                    </el-popconfirm>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        <div style=\"padding:10px\">\r\n            <el-pagination @size-change=\"handleSizeChange\" @current-change=\"handleCurrentChange\" :current-page=\"pageNum\"\r\n                :page-sizes=\"[2, 5, 10, 20]\" :page-size=\"pageSize\" layout=\"total, sizes, prev, pager, next, jumper\"\r\n                :total=\"total\">\r\n            </el-pagination>\r\n        </div>\r\n\r\n        <el-dialog title=\"角色信息\" :visible.sync=\"dialogFormVisible\" width=\"30%\">\r\n            <el-form label-width=\"80px\" size=\"small\">\r\n                <el-form-item label=\"角色名\">\r\n                    <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"描述\">\r\n                    <el-input v-model=\"form.description\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item label=\"唯一标识\">\r\n                    <el-input v-model=\"form.flag\" autocomplete=\"off\"></el-input>\r\n                </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n                <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n\r\n        <el-dialog title=\"菜单分配\" :visible.sync=\"dialogMenu\" width=\"40%\">\r\n            <el-tree :props=\"props\" :data=\"menuData\" node-key=\"id\" ref=\"tree\" :default-expanded-keys=\"expands\"\r\n                :default-checked-keys=\"checks\" show-checkbox>\r\n                <span class=\"custom-tree-node\" slot-scope=\"{data}\">\r\n                    <span><i :class=\"data.icon\"></i>{{data.name}}</span>\r\n                </span>\r\n            </el-tree>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"dialogMenu = false\">取 消</el-button>\r\n                <el-button type=\"primary\" @click=\"saveRoleMenu\">确 定</el-button>\r\n            </div>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n<script>\r\n    import request from '@/utils/request.js';\r\n    import { resetRouter } from \"@/router\";\r\n    import { deleteBatch, deleteById, getAllMenu, getRoleMenu, getRoleMenuIds, addRole } from \"@/api/role.js\";\r\n    const defaultRoleListQuerry = {\r\n        name: null,\r\n    }\r\n    export default {\r\n        name: \"ElectricPileAdminRole\",\r\n        data() {\r\n            return {\r\n                tableData: [],\r\n                total: 0,\r\n                pageNum: 1,\r\n                pageSize: 10,\r\n                roleListQuerry: Object.assign({}, defaultRoleListQuerry),\r\n                dialogFormVisible: false,\r\n                dialogMenu: false,\r\n                form: {},\r\n                multipleSelection: [],\r\n                menuData: [],\r\n                props: {\r\n                    label: 'name'\r\n                },\r\n                roleId: 0,\r\n                roleFlag: '',\r\n                expands: [],\r\n                checks: []\r\n            }\r\n        },\r\n        created() {\r\n            this.load();\r\n        },\r\n        methods: {\r\n            //编辑按钮事件\r\n            handleEdit(row) {\r\n                console.log(row);\r\n                this.form = row;//把当前行的数据赋值给form\r\n                this.dialogFormVisible = true;\r\n            },\r\n            //表格多选选中事件\r\n            handleSelectionChange(val) {\r\n                console.log(val);\r\n                this.multipleSelection = val;\r\n            },\r\n            //批量删除按钮事件\r\n            delBatch() {\r\n                let ids = this.multipleSelection.map(v => v.id);//map这个方法可以实现将multipleSelection中的对象扁平化处理。\r\n                console.log(ids);\r\n                deleteBatch(ids).then(res => {\r\n                    if (res.code == '200') {\r\n                        this.$message.success(\"批量删除成功\");\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"批量删除失败\");\r\n                    }\r\n                })\r\n            },\r\n            //单条记录删除按钮事件\r\n            handleDelete(id) {\r\n                deleteById(id).then(res => {\r\n                    if (res.code == '200') {\r\n                        this.$message.success(\"删除成功\");\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"删除失败\");\r\n                    }\r\n                })\r\n            },\r\n            handleSizeChange(val) {/*传递过来当前是第几页*/\r\n                console.log(`每页 ${val} 条`);\r\n                this.pageSize = val;  //获取当前每页显示条数\r\n                this.load();\r\n            },\r\n            handleCurrentChange(val) {/*传递过来当前是第几页*/\r\n                console.log(`当前页: ${val}`);\r\n                this.pageNum = val;   //获取当前第几页\r\n                this.load();\r\n            },\r\n            //将请求数据封装为一个方法\r\n            load() {\r\n                //请求分页查询数据\r\n                //使用axios封装的request        \r\n                this.request.get(\"http://localhost:8088/role/page\", {\r\n                    params: {\r\n                        pageNum: this.pageNum,\r\n                        pageSize: this.pageSize,\r\n                        name: this.name\r\n                    }\r\n                }).then(res => {\r\n                    this.tableData = res.data.records;\r\n                    this.total = res.data.total;\r\n                })\r\n            },\r\n            //新增角色按钮事件\r\n            handleAdd() {\r\n                this.dialogFormVisible = true;\r\n                this.form = {};//如果之前有填过值，可以置空\r\n            },\r\n            //分配菜单按钮事件 \r\n            selectMenu(role) {\r\n                this.dialogMenu = true;\r\n                this.roleId = role.id;\r\n                //添加权限（树形结构）\r\n                //拿到菜单列表\r\n                getAllMenu().then(res => {\r\n                    this.menuData = res.data.data\r\n                    console.log(\"所有菜单数据\", this.menuData)\r\n                    this.expands = this.menuData.map(v => v.id)\r\n                    console.log(\"expands\", this.expands)\r\n                })\r\n\r\n                getRoleMenu(this.roleId).then(res => {//当前角色的权限菜单\r\n                    console.log(\"当前角色的菜单\", res.data);\r\n                    this.checks = res.data.data;\r\n                    getRoleMenuIds().then(r => {//取出所有的菜单id\r\n                        const ids = r.data.data\r\n                        console.log(\"所有菜单id\", ids)\r\n                        ids.forEach(id => {\r\n                            if (!this.checks.includes(id)) { //和当前的权限菜单进行比较,没有就不显示\r\n                                //使用setChecked方法需要设置  node-key=\"id\"  设置为false即为不渲染\r\n                                this.$refs.tree.setChecked(id, false)\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n\r\n            },\r\n            //保存角色按钮事件\r\n            save() {\r\n                addRole(this.form).then(res => {\r\n                    if (res.code == '200') {\r\n                        this.$message.success(\"保存成功\");\r\n                        this.dialogFormVisible = false;\r\n                        this.load();\r\n                    } else {\r\n                        this.$message.error(\"保存失败\");\r\n                    }\r\n                })\r\n            },\r\n            //分配菜单对话框中的确定按钮事件\r\n            saveRoleMenu() {\r\n                this.request.post(\"http://localhost:8088/role/roleMenu/\" + this.roleId, this.$refs.tree.getCheckedKeys().concat(this.$refs.tree.getHalfCheckedKeys())).then(res => {\r\n                    if (res.code == '200') {\r\n                        this.$message.success(\"绑定成功\");\r\n                        this.dialogMenu = false;\r\n                        //操作管理员角色权限后需要重新登录\r\n                        if (this.roleFlag == \"ROLE_ADMIN\") {\r\n                            //把原来的路由清除   \r\n                            resetRouter();\r\n                            this.$router.push(\"/login\")\r\n                        }\r\n                    } else {\r\n                        this.$message.error(res.msg);\r\n                    }\r\n                })\r\n            },\r\n            //搜索重置按钮事件\r\n            reset() {\r\n                this.roleListQuerry.name = \"\";\r\n                this.load();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
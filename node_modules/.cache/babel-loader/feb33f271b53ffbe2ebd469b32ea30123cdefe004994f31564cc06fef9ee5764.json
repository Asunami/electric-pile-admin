{"ast":null,"code":"import { getIcons, addMenu, deleteBatch, deleteById, getAllMenu } from '@/api/system.js';\nconst defaultMenuListQuery = {\n  name: null\n};\nexport default {\n  name: \"ElectricPileAdminIndex\",\n  data() {\n    return {\n      tableData: [],\n      menuListQuery: Object.assign({}, defaultMenuListQuery),\n      dialogFormVisible: false,\n      form: {},\n      multipleSelection: [],\n      options: []\n    };\n  },\n  created() {\n    this.load();\n  },\n  methods: {\n    //搜索重置\n    reset() {\n      this.name = '';\n      this.load();\n    },\n    //打开新增菜单对话框，同时获取图标数据\n    handleAdd() {\n      this.dialogFormVisible = true;\n      this.form = {}; //如果之前有填过值，可以置空 \n      getIcons().then(res => {\n        //不管是新增还是编辑都直接获取图标数据即可，不需要与当前id对应    \n        console.log(res);\n        this.options = res.data.data;\n      });\n    },\n    //实现新增菜单\n    save() {\n      addMenu(this.form).then(res => {\n        if (res.code == '200') {\n          this.$message.success(\"保存成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"保存失败\");\n        }\n      });\n    },\n    //编辑菜单\n    handleEdit(row) {\n      //编辑\n      this.form = row; //把当前行的数据赋值给form\n      this.dialogFormVisible = true;\n      getIcons.then(res => {\n        //不管是新增还是编辑都直接获取图标数据即可，不需要与当前id对应\n        console.log(res);\n        this.options = res.data.data;\n      });\n    },\n    //多行选择\n    handleSelectionChange(val) {\n      console.log(val);\n      this.multipleSelection = val;\n    },\n    //批量删除\n    delBatch() {\n      let ids = this.multipleSelection.map(v => v.id); //map这个方法可以实现将multipleSelection中的对象扁平化处理。\n      deleteBatch(ids).then(res => {\n        if (res.code == '200') {\n          this.$message.success(\"批量删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"批量删除失败\");\n        }\n      });\n    },\n    //根据选择行的id删除\n    handleDelete(id) {\n      deleteById(id).then(res => {\n        if (res.code == '200') {\n          this.$message.success(\"删除成功\");\n          this.load();\n        } else {\n          this.$message.error(\"删除失败\");\n        }\n      });\n    },\n    //将请求数据封装为一个方法\n    load() {\n      //使用axios封装的request，获取所有菜单数据        \n      getAllMenu(this.menuListQuery).then(res => {\n        console.log(res);\n        this.tableData = res.data.data;\n      });\n    },\n    //新增子菜单，打开新增菜单对话框,把父菜单的id传递到form中\n    childmenuAdd(pid) {\n      this.dialogFormVisible = true;\n      this.form = {}; //如果之前有填过值，可以置空\n      if (pid) {\n        this.form.pid = pid; //传递父菜单的id\n      }\n\n      getIcons().then(res => {\n        //不管是新增还是编辑都直接获取图标数据即可，不需要与当前id对应    \n        console.log(res);\n        this.options = res.data.data;\n      });\n    }\n  }\n};","map":{"version":3,"names":["getIcons","addMenu","deleteBatch","deleteById","getAllMenu","defaultMenuListQuery","name","data","tableData","menuListQuery","Object","assign","dialogFormVisible","form","multipleSelection","options","created","load","methods","reset","handleAdd","then","res","console","log","save","code","$message","success","error","handleEdit","row","handleSelectionChange","val","delBatch","ids","map","v","id","handleDelete","childmenuAdd","pid"],"sources":["src/views/system/index.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div style=\"padding:10px\">\r\n      <el-input style=\"width:250px\" suffix-icon=\"el-icon-search\" placeholder=\"请输入名称搜索\"\r\n        v-model=\"menuListQuery.name\"></el-input>\r\n      <el-button style=\"margin-left:5px\" type=\"primary\" @click=\"load()\">搜索</el-button>\r\n      <el-button style=\"margin-left:5px\" type=\"warning\" @click=\"reset()\">重置</el-button>\r\n    </div>\r\n    <div style=\"margin:10px\">\r\n      <el-button type=\"primary\" @click=\"handleAdd\">新增<i class=\"el-icon-circle-plus\"></i></el-button>\r\n      <el-button type=\"danger\" @click=\"delBatch\">批量删除<i class=\"el-icon-remove\"></i></el-button>\r\n    </div>\r\n    <el-table :data=\"tableData\" row-key=\"id\" border default-expand-all @selection-change=\"handleSelectionChange\">\r\n      <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n      <el-table-column prop=\"id\" label=\"ID \" width=\"80\" align=\"center\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"name\" label=\"名称 \" width=\"100\" align=\"center\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"path\" label=\"路径 \" width=\"100\" align=\"center\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"pagePath\" label=\"页面路径 \" width=\"100\" align=\"center\">\r\n      </el-table-column>\r\n      <el-table-column label=\"图标 \" align=\"center\" width=\"75\">\r\n        <template slot-scope=\"scope\">\r\n          <i style=\"font-size:18px\" :class=\"scope.row.icon\"></i>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"description\" label=\"描述\" align=\"center\">\r\n      </el-table-column>\r\n      <el-table-column fixed=\"right\" width=\"300\" label=\"操作\" align=\"center\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"primary\" size=\"small\" icon=\"el-icon-edit\" @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n          <el-popconfirm style=\"margin-left:5px\" confirm-button-text='确定' cancel-button-text='再想想' icon=\"el-icon-info\"\r\n            icon-color=\"red\" title=\"您确定删除吗？\" @confirm=\"handleDelete(scope.row.id)\">\r\n            <el-button type=\"danger\" size=\"small\" slot=\"reference\" icon=\"el-icon-delete\">删除</el-button>\r\n          </el-popconfirm>\r\n          <el-button type=\"primary\" size=\"small\" icon=\"el-icon-plus\" @click=\"childmenuAdd(scope.row.id)\"\r\n            v-if=\"!scope.row.pid && !scope.row.path\">新增</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <el-dialog title=\"菜单信息\" :visible.sync=\"dialogFormVisible\" width=\"30%\">\r\n      <el-form label-width=\"80px\" size=\"small\">\r\n        <el-form-item label=\"名称\">\r\n          <el-input v-model=\"form.name\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"路径\">\r\n          <el-input v-model=\"form.path\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"页面路径\">\r\n          <el-input v-model=\"form.pagePath\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"图标\">\r\n          <el-select clearable v-model=\"form.icon\" placeholder=\"请选择\" style=\"width:100%;\">\r\n            <el-option v-for=\"item in options\" :key=\"item.name\" :label=\"item.name\" :value=\"item.value\">\r\n              <i :class=\"item.value\">{{item.name}}</i>\r\n            </el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"描述\">\r\n          <el-input v-model=\"form.description\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import { getIcons, addMenu, deleteBatch, deleteById, getAllMenu } from '@/api/system.js'\r\n  const defaultMenuListQuery = {\r\n    name: null,\r\n  }\r\n  export default {\r\n    name: \"ElectricPileAdminIndex\",\r\n    data() {\r\n      return {\r\n        tableData: [],\r\n        menuListQuery: Object.assign({}, defaultMenuListQuery),\r\n        dialogFormVisible: false,\r\n        form: {},\r\n        multipleSelection: [],\r\n        options: []\r\n      }\r\n    },\r\n    created() {\r\n      this.load();\r\n    },\r\n    methods: {\r\n      //搜索重置\r\n      reset() {\r\n        this.name = '';\r\n        this.load();\r\n      },\r\n      //打开新增菜单对话框，同时获取图标数据\r\n      handleAdd() {\r\n        this.dialogFormVisible = true;\r\n        this.form = {};//如果之前有填过值，可以置空 \r\n        getIcons().then(res => { //不管是新增还是编辑都直接获取图标数据即可，不需要与当前id对应    \r\n          console.log(res);\r\n          this.options = res.data.data;\r\n        })\r\n      },\r\n      //实现新增菜单\r\n      save() {\r\n        addMenu(this.form).then(res => {\r\n          if (res.code == '200') {\r\n            this.$message.success(\"保存成功\");\r\n            this.dialogFormVisible = false;\r\n            this.load();\r\n          } else {\r\n            this.$message.error(\"保存失败\");\r\n          }\r\n        })\r\n      },\r\n      //编辑菜单\r\n      handleEdit(row) {  //编辑\r\n        this.form = row;//把当前行的数据赋值给form\r\n        this.dialogFormVisible = true;\r\n        getIcons.then(res => { //不管是新增还是编辑都直接获取图标数据即可，不需要与当前id对应\r\n          console.log(res);\r\n          this.options = res.data.data;\r\n        })\r\n      },\r\n      //多行选择\r\n      handleSelectionChange(val) {\r\n        console.log(val);\r\n        this.multipleSelection = val;\r\n      },\r\n      //批量删除\r\n      delBatch() {\r\n        let ids = this.multipleSelection.map(v => v.id);//map这个方法可以实现将multipleSelection中的对象扁平化处理。\r\n        deleteBatch(ids).then(res => {\r\n          if (res.code == '200') {\r\n            this.$message.success(\"批量删除成功\");\r\n            this.load();\r\n          } else {\r\n            this.$message.error(\"批量删除失败\");\r\n          }\r\n        })\r\n      },\r\n      //根据选择行的id删除\r\n      handleDelete(id) {\r\n        deleteById(id).then(res => {\r\n          if (res.code == '200') {\r\n            this.$message.success(\"删除成功\");\r\n            this.load();\r\n          } else {\r\n            this.$message.error(\"删除失败\");\r\n          }\r\n        })\r\n      },\r\n      //将请求数据封装为一个方法\r\n      load() {\r\n        //使用axios封装的request，获取所有菜单数据        \r\n        getAllMenu(this.menuListQuery).then(res => {\r\n          console.log(res);\r\n          this.tableData = res.data.data;\r\n        })\r\n      },\r\n      //新增子菜单，打开新增菜单对话框,把父菜单的id传递到form中\r\n      childmenuAdd(pid) {\r\n        this.dialogFormVisible = true;\r\n        this.form = {};//如果之前有填过值，可以置空\r\n        if (pid) {\r\n          this.form.pid = pid;//传递父菜单的id\r\n        }\r\n        getIcons().then(res => { //不管是新增还是编辑都直接获取图标数据即可，不需要与当前id对应    \r\n          console.log(res);\r\n          this.options = res.data.data;\r\n        })\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n<style scoped>\r\n</style>"],"mappings":"AAwEA,SAAAA,QAAA,EAAAC,OAAA,EAAAC,WAAA,EAAAC,UAAA,EAAAC,UAAA;AACA,MAAAC,oBAAA;EACAC,IAAA;AACA;AACA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,aAAA,EAAAC,MAAA,CAAAC,MAAA,KAAAN,oBAAA;MACAO,iBAAA;MACAC,IAAA;MACAC,iBAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EACAC,OAAA;IACA;IACAC,MAAA;MACA,KAAAb,IAAA;MACA,KAAAW,IAAA;IACA;IACA;IACAG,UAAA;MACA,KAAAR,iBAAA;MACA,KAAAC,IAAA;MACAb,QAAA,GAAAqB,IAAA,CAAAC,GAAA;QAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACA,KAAAP,OAAA,GAAAO,GAAA,CAAAf,IAAA,CAAAA,IAAA;MACA;IACA;IACA;IACAkB,KAAA;MACAxB,OAAA,MAAAY,IAAA,EAAAQ,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAI,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAhB,iBAAA;UACA,KAAAK,IAAA;QACA;UACA,KAAAU,QAAA,CAAAE,KAAA;QACA;MACA;IACA;IACA;IACAC,WAAAC,GAAA;MAAA;MACA,KAAAlB,IAAA,GAAAkB,GAAA;MACA,KAAAnB,iBAAA;MACAZ,QAAA,CAAAqB,IAAA,CAAAC,GAAA;QAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACA,KAAAP,OAAA,GAAAO,GAAA,CAAAf,IAAA,CAAAA,IAAA;MACA;IACA;IACA;IACAyB,sBAAAC,GAAA;MACAV,OAAA,CAAAC,GAAA,CAAAS,GAAA;MACA,KAAAnB,iBAAA,GAAAmB,GAAA;IACA;IACA;IACAC,SAAA;MACA,IAAAC,GAAA,QAAArB,iBAAA,CAAAsB,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,EAAA;MACApC,WAAA,CAAAiC,GAAA,EAAAd,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAI,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAX,IAAA;QACA;UACA,KAAAU,QAAA,CAAAE,KAAA;QACA;MACA;IACA;IACA;IACAU,aAAAD,EAAA;MACAnC,UAAA,CAAAmC,EAAA,EAAAjB,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAI,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAX,IAAA;QACA;UACA,KAAAU,QAAA,CAAAE,KAAA;QACA;MACA;IACA;IACA;IACAZ,KAAA;MACA;MACAb,UAAA,MAAAK,aAAA,EAAAY,IAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACA,KAAAd,SAAA,GAAAc,GAAA,CAAAf,IAAA,CAAAA,IAAA;MACA;IACA;IACA;IACAiC,aAAAC,GAAA;MACA,KAAA7B,iBAAA;MACA,KAAAC,IAAA;MACA,IAAA4B,GAAA;QACA,KAAA5B,IAAA,CAAA4B,GAAA,GAAAA,GAAA;MACA;;MACAzC,QAAA,GAAAqB,IAAA,CAAAC,GAAA;QAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;QACA,KAAAP,OAAA,GAAAO,GAAA,CAAAf,IAAA,CAAAA,IAAA;MACA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}